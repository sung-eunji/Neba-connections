"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  reactComponentTagger: () => reactComponentTagger
});
module.exports = __toCommonJS(index_exports);
var import_node_path = __toESM(require("path"), 1);
var import_parser = require("@babel/parser");
var import_core = require("@babel/core");
var import_types = require("@babel/types");
var import_magic_string = __toESM(require("magic-string"), 1);
function reactComponentTagger({
  exclude = [],
  extensions = [".jsx", ".tsx"]
} = {}) {
  const cwd = process.cwd();
  return {
    name: "vite-plugin-react-component-tagger",
    enforce: "pre",
    async transform(code, id) {
      if (id.includes("node_modules") || !extensions.includes(import_node_path.default.extname(id))) {
        return;
      }
      const filename = import_node_path.default.basename(id);
      const filepath = import_node_path.default.relative(cwd, id);
      try {
        const ast = (0, import_parser.parse)(code, {
          sourceType: "module",
          plugins: ["jsx", "typescript"]
        });
        const magic = new import_magic_string.default(code);
        (0, import_core.traverse)(ast, {
          JSXOpeningElement({ node, parent, parentPath }) {
            const name = getComponentName(node.name);
            if (exclude.includes(name)) {
              return;
            }
            const start = `${parent.loc?.start.line ?? 0}:${parent.loc?.start.column ?? 0}:${parent.loc?.start.index ?? 0}`;
            const end = `${parent.loc?.end.line ?? 0}:${parent.loc?.end.column ?? 0}:${parent.loc?.end.index ?? 0}`;
            const attributes = node.attributes.reduce((data, attr) => {
              if ((0, import_types.isJSXAttribute)(attr) && (0, import_types.isJSXIdentifier)(attr.name)) {
                if (attr.name.name === "key") {
                  for (let currentPath = parentPath; currentPath; currentPath = currentPath.parentPath) {
                    if (isMapCall(currentPath.node)) {
                      data.push(
                        `data-component-map-start="${currentPath.node.loc?.start.line ?? 0}:${currentPath.node.loc?.start.column ?? 0}:${currentPath.node.loc?.start.index ?? 0}"`,
                        `data-component-map-end="${currentPath.node.loc?.end.line ?? 0}:${currentPath.node.loc?.end.column ?? 0}:${currentPath.node.loc?.end.index ?? 0}"`
                      );
                      break;
                    }
                  }
                } else if (attr.name.name === "src") {
                  if ((0, import_types.isStringLiteral)(attr.value)) {
                    data.push(`data-component-src="${attr.value.value}"`);
                  } else if ((0, import_types.isJSXExpressionContainer)(attr.value) && (0, import_types.isStringLiteral)(attr.value.expression)) {
                    data.push(
                      `data-component-src="${attr.value.expression.value}"`
                    );
                  }
                } else if (attr.name.name === "className") {
                  if ((0, import_types.isStringLiteral)(attr.value)) {
                    data.push(`data-component-class="${attr.value.value}"`);
                  } else if ((0, import_types.isJSXExpressionContainer)(attr.value) && (0, import_types.isStringLiteral)(attr.value.expression)) {
                    data.push(
                      `data-component-class="${attr.value.expression.value}"`
                    );
                  }
                }
              }
              return data;
            }, []).join(" ");
            magic.appendLeft(
              node.name.end ?? 0,
              ` data-component-start="${start}" data-component-end="${end}" data-component-path="${filepath}" data-component-file="${filename}" data-component-name="${name}" ${attributes} `
            );
          }
        });
        return {
          code: magic.toString(),
          map: magic.generateMap({ hires: true })
        };
      } catch (e) {
        console.error(`Error processing file ${filepath}:`, e);
        return null;
      }
    }
  };
}
function isMapCall(node) {
  return (0, import_types.isCallExpression)(node) && (0, import_types.isMemberExpression)(node.callee) && (0, import_types.isIdentifier)(node.callee.property) && node.callee.property.name === "map";
}
function getComponentName(name) {
  return (0, import_types.isJSXIdentifier)(name) ? name.name : (0, import_types.isJSXMemberExpression)(name) ? `${getComponentName(name.object)}.${getComponentName(
    name.property
  )}` : "";
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  reactComponentTagger
});
